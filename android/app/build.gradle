apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

react {
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.quran"
    defaultConfig {
        applicationId "com.quran"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0" 
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.outputs.all { output ->
                def appName = "Quran"
                def newName = "${appName}-v${variant.versionName}.apk"
                outputFileName = newName
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release ?: signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}


def releaseOutputDir = "$rootDir/../AppReleases"

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()

    tasks.register("copy${variantName}Apk", Copy) {
        dependsOn variant.assembleProvider.get()
        from(variant.outputs.first().outputFile)
        into(releaseOutputDir)
        doFirst {
            println("âœ… Copying APK to $releaseOutputDir")
            file(releaseOutputDir).mkdirs()
        }
    }

    if (variant.buildType.name == "release") {
        tasks.register("copy${variantName}Aab", Copy) {
            dependsOn("bundle${variantName}")
            from("$buildDir/outputs/bundle/${variant.buildType.name}") {
                include "*.aab"
            }
            into(releaseOutputDir)
            rename { String fileName ->
                def appName = "Quran" 
                def versionName = android.defaultConfig.versionName
                "${appName}-v${versionName}.aab"
            }
            doFirst {
                 println("ðŸ“¦ Copying and renaming AAB to $releaseOutputDir")
                 file(releaseOutputDir).mkdirs()
            }
        }
    }
}

// Hooks the copy tasks to run automatically after a build finishes
afterEvaluate {
    tasks.named("assembleRelease").configure {
        finalizedBy "copyReleaseApk"
    }

    tasks.named("bundleRelease").configure {
        finalizedBy "copyReleaseAab"
    }
}